package com.sgic.semita.controller;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import com.sgic.semita.common.response.BasicResponse;
import com.sgic.semita.common.response.ValidationFailureResponse;
import com.sgic.semita.entities.Designation;
import com.sgic.semita.entities.Employee;
import com.sgic.semita.enums.RestApiResponseStatus;
import com.sgic.semita.request.dto.EmployeeRequestDto;
import com.sgic.semita.services.DesignationService;
import com.sgic.semita.services.EmployeeService;
import com.sgic.semita.utils.Constants;
import com.sgic.semita.utils.EndPointURI;
import com.sgic.semita.utils.ValidationFailureResponseCode;

@CrossOrigin
@RestController
public class EmployeeController {
  @Autowired
  private EmployeeService employeeService;
  
  @Autowired
  private DesignationService designationService;

  @Autowired
  private ValidationFailureResponseCode validationFailureResponseCode;

  @PostMapping(value = EndPointURI.EMPLOYEE)
  public ResponseEntity<Object> saveEmployee(@RequestBody EmployeeRequestDto employeeRequestDto) {
    if (employeeService.isEmployeeExistByEmail(employeeRequestDto.getEmail())
        || employeeService.isEmployeeExistByContactNumber(employeeRequestDto.getContactNumber())) {
      return new ResponseEntity<>(new ValidationFailureResponse(Constants.EMPLOYEE_ALREADY_EXISTS,
          validationFailureResponseCode.getEmployeeAlreadyExists()), HttpStatus.BAD_REQUEST);
    }
    Designation designation=new Designation();
    designation.setId(employeeRequestDto.getDesignationId());
    Employee employee=new Employee();
    BeanUtils.copyProperties(employeeRequestDto, employee);
    employee.setDesignation(designation);
    employeeService.saveEmployee(employee);
    return new ResponseEntity<>(
        new BasicResponse(RestApiResponseStatus.OK, Constants.ADD_EMPLOYEE_SUCCESS),
        HttpStatus.BAD_REQUEST);
  }
  @GetMapping(value = EndPointURI.EMPLOYEES)
  public ResponseEntity<Object>getAllEmployee(){
    return new ResponseEntity<>(employeeService.getAllEmployees(),HttpStatus.BAD_REQUEST);
  }
}
